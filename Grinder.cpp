//****************************************************************************
// Model: Grinder.qm
// File:  ./Grinder.cpp
//
// This code has been generated by QM tool (see state-machine.com/qm).
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//****************************************************************************
//${.::Grinder.cpp} ..........................................................

#include "board.h"
#include "includes.h"
#include "signals.h"

//#include "bsp.h"  /* Board Support Package */
//#include "dpp.h"  /* Application interface */

Q_DEFINE_THIS_MODULE("Grinder")

static Grinder l_grinder;                    // instantiate the Grinder AO
QActive * const AO_Grinder = &l_grinder;     // initialize the global pointer to grinder

//${AOs::Grinder} ............................................................

//${AOs::Grinder::SM} ........................................................
QP::QState Grinder::initial(Grinder * const me, QP::QEvt const * const e) {
    static struct {
        QP::QMState const *target;
        QP::QActionHandler act[2];
    } const tatbl_ = { // transition-action table
        &on_s,
        {
            Q_ACTION_CAST(&on_i), // initial tran.
            Q_ACTION_CAST(0)  // zero terminator
        }
    };
    // ${AOs::Grinder::SM::initial}
    //me->m_timeEvt.postEvery(me, BSP_TICKS_PER_SEC/5);
    return QM_TRAN_INIT(&tatbl_);
}
//${AOs::Grinder::SM::on} ....................................................
QP::QMState const Grinder::on_s = {
    static_cast<QP::QMState const *>(0), // superstate (top)
    Q_STATE_CAST(&on),
    Q_ACTION_CAST(0), // no entry action
    Q_ACTION_CAST(0), // no exit action
    Q_ACTION_CAST(&on_i)
};
// ${AOs::Grinder::SM::on::initial}
QP::QState Grinder::on_i(Grinder * const me) {
    static QP::QMTranActTable const tatbl_ = { // transition-action table
        &idle_s,
        {
            Q_ACTION_CAST(0)  // zero terminator
        }
    };
    // ${AOs::Grinder::SM::on::initial}
    return QM_TRAN_INIT(&tatbl_);
}
// ${AOs::Grinder::SM::on}
QP::QState Grinder::on(Grinder * const me, QP::QEvt const * const e) {
    QP::QState status_;
    switch (e->sig) {
        // ${AOs::Grinder::SM::on::ENCODER_INC}
        case ENCODER_INC_SIG: {
            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[2];
            } const tatbl_ = { // transition-action table
                &on_s,
                {
                    Q_ACTION_CAST(&on_i), // initial tran.
                    Q_ACTION_CAST(0)  // zero terminator
                }
            };
            DOSE += GRINDER_DOSE_STEP;
            BSP_displayDose(DOSE);
            status_ = QM_TRAN(&tatbl_);
            break;
        }
        // ${AOs::Grinder::SM::on::ENCODER_DEC}
        case ENCODER_DEC_SIG: {
            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[2];
            } const tatbl_ = { // transition-action table
                &on_s,
                {
                    Q_ACTION_CAST(&on_i), // initial tran.
                    Q_ACTION_CAST(0)  // zero terminator
                }
            };
            DOSE -= GRINDER_DOSE_STEP;
            BSP_displayDose(DOSE);
            status_ = QM_TRAN(&tatbl_);
            break;
        }
        default: {
            status_ = QM_SUPER();
            break;
        }
    }
    return status_;
}
//${AOs::Grinder::SM::on::idle} ..............................................
QP::QMState const Grinder::idle_s = {
    &Grinder::on_s, // superstate
    Q_STATE_CAST(&idle),
    Q_ACTION_CAST(0), // no entry action
    Q_ACTION_CAST(0), // no exit action
    Q_ACTION_CAST(0)  // no intitial tran.
};
// ${AOs::Grinder::SM::on::idle}
QP::QState Grinder::idle(Grinder * const me, QP::QEvt const * const e) {
    QP::QState status_;
    switch (e->sig) {
        // ${AOs::Grinder::SM::on::idle::TIMEOUT}
        case TIMEOUT_SIG: {
            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[2];
            } const tatbl_ = { // transition-action table
                &grinding_s,
                {
                    Q_ACTION_CAST(&grinding_e), // entry
                    Q_ACTION_CAST(0)  // zero terminator
                }
            };
            status_ = QM_TRAN(&tatbl_);
            break;
        }
        default: {
            status_ = QM_SUPER();
            break;
        }
    }
    return status_;
}
//${AOs::Grinder::SM::on::grinding} ..........................................
QP::QMState const Grinder::grinding_s = {
    &Grinder::on_s, // superstate
    Q_STATE_CAST(&grinding),
    Q_ACTION_CAST(&grinding_e),
    Q_ACTION_CAST(0), // no exit action
    Q_ACTION_CAST(0)  // no intitial tran.
};
// ${AOs::Grinder::SM::on::grinding}
QP::QState Grinder::grinding_e(Grinder * const me) {


    (void)me; // avoid compiler warning in case 'me' is not used
    return QM_ENTRY(&grinding_s);
}
// ${AOs::Grinder::SM::on::grinding}
QP::QState Grinder::grinding(Grinder * const me, QP::QEvt const * const e) {
    QP::QState status_;
    switch (e->sig) {
        default: {
            status_ = QM_SUPER();
            break;
        }
    }
    (void)me; // avoid compiler warning in case 'me' is not used
    return status_;
}

