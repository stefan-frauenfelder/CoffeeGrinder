//****************************************************************************
// Model: Grinder.qm
// File:  ./Scale.cpp
//
// This code has been generated by QM tool (see state-machine.com/qm).
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//****************************************************************************
//${.::Scale.cpp} ............................................................

#include "board.h"
#include "includes.h"
#include "signals.h"

//#include "bsp.h"  /* Board Support Package */
//#include "dpp.h"  /* Application interface */

Q_DEFINE_THIS_MODULE("Scale")

static Scale l_scale;                    // instantiate the Scale AO
QActive * const AO_Scale = &l_scale;     // initialize the global pointer to scale

//${AOs::Scale} ..............................................................

//${AOs::Scale::SM} ..........................................................
QP::QState Scale::initial(Scale * const me, QP::QEvt const * const e) {
    static struct {
        QP::QMState const *target;
        QP::QActionHandler act[2];
    } const tatbl_ = { // transition-action table
        &measuring_s,
        {
            Q_ACTION_CAST(&measuring_e), // entry
            Q_ACTION_CAST(0)  // zero terminator
        }
    };
    // ${AOs::Scale::SM::initial}
    return QM_TRAN_INIT(&tatbl_);
}
//${AOs::Scale::SM::idle} ....................................................
QP::QMState const Scale::idle_s = {
    static_cast<QP::QMState const *>(0), // superstate (top)
    Q_STATE_CAST(&idle),
    Q_ACTION_CAST(&idle_e),
    Q_ACTION_CAST(0), // no exit action
    Q_ACTION_CAST(0)  // no intitial tran.
};
// ${AOs::Scale::SM::idle}
QP::QState Scale::idle_e(Scale * const me) {
    BSP_ledOn();
    (void)me; // avoid compiler warning in case 'me' is not used
    return QM_ENTRY(&idle_s);
}
// ${AOs::Scale::SM::idle}
QP::QState Scale::idle(Scale * const me, QP::QEvt const * const e) {
    QP::QState status_;
    switch (e->sig) {
        // ${AOs::Scale::SM::idle::SCALE_CALIB}
        case SCALE_CALIB_SIG: {
            static QP::QMTranActTable const tatbl_ = { // transition-action table
                &calibration_s,
                {
                    Q_ACTION_CAST(0)  // zero terminator
                }
            };
            status_ = QM_TRAN(&tatbl_);
            break;
        }
        default: {
            status_ = QM_SUPER();
            break;
        }
    }
    return status_;
}
//${AOs::Scale::SM::sampling} ................................................
QP::QMState const Scale::sampling_s = {
    static_cast<QP::QMState const *>(0), // superstate (top)
    Q_STATE_CAST(&sampling),
    Q_ACTION_CAST(&sampling_e),
    Q_ACTION_CAST(0), // no exit action
    Q_ACTION_CAST(0)  // no intitial tran.
};
// ${AOs::Scale::SM::sampling}
QP::QState Scale::sampling_e(Scale * const me) {
    me->weight = int(BSP_scaleSample());
    return QM_ENTRY(&sampling_s);
}
// ${AOs::Scale::SM::sampling}
QP::QState Scale::sampling(Scale * const me, QP::QEvt const * const e) {
    QP::QState status_;
    switch (e->sig) {
        // ${AOs::Scale::SM::sampling::SCALE_SAMPLING_DONE}
        case SCALE_SAMPLING_DONE_SIG: {
            // ${AOs::Scale::SM::sampling::SCALE_SAMPLING_D~::[me->weight<DOSE]}
            if (me->weight < DOSE) {
                static struct {
                    QP::QMState const *target;
                    QP::QActionHandler act[2];
                } const tatbl_ = { // transition-action table
                    &measuring_s,
                    {
                        Q_ACTION_CAST(&measuring_e), // entry
                        Q_ACTION_CAST(0)  // zero terminator
                    }
                };
                status_ = QM_TRAN(&tatbl_);
            }
            // ${AOs::Scale::SM::sampling::SCALE_SAMPLING_D~::[else]}
            else {
                static struct {
                    QP::QMState const *target;
                    QP::QActionHandler act[2];
                } const tatbl_ = { // transition-action table
                    &idle_s,
                    {
                        Q_ACTION_CAST(&idle_e), // entry
                        Q_ACTION_CAST(0)  // zero terminator
                    }
                };
                status_ = QM_TRAN(&tatbl_);
            }
            break;
        }
        default: {
            status_ = QM_SUPER();
            break;
        }
    }
    return status_;
}
//${AOs::Scale::SM::calibration} .............................................
QP::QMState const Scale::calibration_s = {
    static_cast<QP::QMState const *>(0), // superstate (top)
    Q_STATE_CAST(&calibration),
    Q_ACTION_CAST(0), // no entry action
    Q_ACTION_CAST(0), // no exit action
    Q_ACTION_CAST(0)  // no intitial tran.
};
// ${AOs::Scale::SM::calibration}
QP::QState Scale::calibration(Scale * const me, QP::QEvt const * const e) {
    QP::QState status_;
    switch (e->sig) {
        // ${AOs::Scale::SM::calibration::SCALE_CALIB_DONE}
        case SCALE_CALIB_DONE_SIG: {
            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[2];
            } const tatbl_ = { // transition-action table
                &idle_s,
                {
                    Q_ACTION_CAST(&idle_e), // entry
                    Q_ACTION_CAST(0)  // zero terminator
                }
            };
            status_ = QM_TRAN(&tatbl_);
            break;
        }
        default: {
            status_ = QM_SUPER();
            break;
        }
    }
    return status_;
}
//${AOs::Scale::SM::measuring} ...............................................
QP::QMState const Scale::measuring_s = {
    static_cast<QP::QMState const *>(0), // superstate (top)
    Q_STATE_CAST(&measuring),
    Q_ACTION_CAST(&measuring_e),
    Q_ACTION_CAST(0), // no exit action
    Q_ACTION_CAST(0)  // no intitial tran.
};
// ${AOs::Scale::SM::measuring}
QP::QState Scale::measuring_e(Scale * const me) {
    me->timeEvt.postIn(me, SCALE_MEASUREMENT_RATE);
    return QM_ENTRY(&measuring_s);
}
// ${AOs::Scale::SM::measuring}
QP::QState Scale::measuring(Scale * const me, QP::QEvt const * const e) {
    QP::QState status_;
    switch (e->sig) {
        // ${AOs::Scale::SM::measuring::TIMEOUT}
        case TIMEOUT_SIG: {
            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[2];
            } const tatbl_ = { // transition-action table
                &sampling_s,
                {
                    Q_ACTION_CAST(&sampling_e), // entry
                    Q_ACTION_CAST(0)  // zero terminator
                }
            };
            status_ = QM_TRAN(&tatbl_);
            break;
        }
        default: {
            status_ = QM_SUPER();
            break;
        }
    }
    return status_;
}

