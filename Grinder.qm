<?xml version="1.0" encoding="UTF-8"?>
<model version="3.3.0">
 <framework name="qpcpp"/>
 <package name="AOs" stereotype="0x02">
  <class name="Grinder" superclass="qpcpp::QMActive">
   <attribute name="timeEvt" type="QTimeEvt" visibility="0x00" properties="0x00"/>
   <attribute name="dose" type="float" visibility="0x00" properties="0x00"/>
   <operation name="Grinder" type="" visibility="0x00" properties="0x02">
    <documentation>constructor</documentation>
    <code>: QMActive(Q_STATE_CAST(&amp;Grinder::initial)),
  timeEvt(TIMEOUT_SIG)</code>
   </operation>
   <statechart>
    <initial target="../1">
     <action>//me-&gt;m_timeEvt.postEvery(me, BSP_TICKS_PER_SEC/5);</action>
     <initial_glyph conn="2,3,5,0,10,5">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <state name="on">
     <initial target="../3">
      <initial_glyph conn="10,19,5,3,4">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <tran trig="ENCODER_INC" target="..">
      <action brief="DOSE +">DOSE += GRINDER_DOSE_STEP;
BSP_displayDose(DOSE);</action>
      <tran_glyph conn="42,15,1,1,11,5,-11">
       <action box="0,-2,13,4"/>
      </tran_glyph>
     </tran>
     <tran trig="ENCODER_DEC" target="..">
      <action brief="DOSE -">DOSE -= GRINDER_DOSE_STEP;
BSP_displayDose(DOSE);</action>
      <tran_glyph conn="42,30,1,1,11,8,-11">
       <action box="0,-2,14,4"/>
      </tran_glyph>
     </tran>
     <state name="idle">
      <entry brief="arm"/>
      <tran trig="TIMEOUT" target="../../4">
       <tran_glyph conn="23,26,2,0,5">
        <action box="0,0,8,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="14,13,16,13">
       <entry box="1,2,12,8"/>
      </state_glyph>
     </state>
     <state name="grinding">
      <entry>
</entry>
      <state_glyph node="14,31,16,11">
       <entry box="1,2,5,4"/>
      </state_glyph>
     </state>
     <state_glyph node="6,8,36,41"/>
    </state>
    <state_diagram size="69,63"/>
   </statechart>
  </class>
  <class name="Button" superclass="qpcpp::QMActive">
   <documentation>Button to start the grinding process</documentation>
   <operation name="Button" type="" visibility="0x00" properties="0x02">
    <documentation>constructor</documentation>
    <code>: QMActive(Q_STATE_CAST(&amp;Button::initial)),
  m_timeEvt(TIMEOUT_SIG)</code>
   </operation>
   <statechart>
    <initial target="../1">
     <initial_glyph conn="11,4,5,0,17,3">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="up">
     <state_glyph node="15,7,30,7"/>
    </state>
    <state name="down">
     <state_glyph node="15,22,30,8"/>
    </state>
    <state_diagram size="80,50"/>
   </statechart>
  </class>
  <class name="Scale" superclass="qpcpp::QMActive">
   <attribute name="timeEvt" type="QTimeEvt" visibility="0x00" properties="0x00"/>
   <attribute name="weight" type="float" visibility="0x00" properties="0x00"/>
   <operation name="Scale" type="" visibility="0x00" properties="0x02">
    <documentation>constructor</documentation>
    <code>: QMActive(Q_STATE_CAST(&amp;Scale::initial)),
  timeEvt(TIMEOUT_SIG)</code>
   </operation>
   <statechart>
    <initial target="../4">
     <initial_glyph conn="24,42,5,3,19">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="idle">
     <entry brief="LED on">BSP_ledOn();</entry>
     <tran trig="SCALE_CALIB" target="../../3">
      <tran_glyph conn="40,16,3,1,-16">
       <action box="-11,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="40,11,21,15">
      <entry box="1,2,12,2"/>
     </state_glyph>
    </state>
    <state name="sampling">
     <entry brief="sample">me-&gt;weight = int(BSP_scaleSample());</entry>
     <tran trig="SCALE_SAMPLING_DONE">
      <choice target="../../../1">
       <guard>else</guard>
       <choice_glyph conn="89,40,4,1,-22,-28">
        <action box="0,-4,10,2"/>
       </choice_glyph>
      </choice>
      <choice target="../../../4">
       <guard>me-&gt;weight &lt; DOSE</guard>
       <choice_glyph conn="89,40,5,1,-30">
        <action box="-14,-2,13,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="73,49,3,-1,16,-9">
       <action box="0,0,18,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="73,33,21,19">
      <entry box="1,2,9,2"/>
     </state_glyph>
    </state>
    <state name="calibration">
     <tran trig="SCALE_CALIB_DONE" target="../../1">
      <tran_glyph conn="24,22,1,3,16">
       <action box="0,-2,16,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="7,11,17,15"/>
    </state>
    <state name="measuring">
     <entry brief="armTimer">me-&gt;timeEvt.postIn(me, SCALE_MEASUREMENT_RATE);</entry>
     <tran trig="TIMEOUT" target="../../2">
      <tran_glyph conn="59,45,1,3,14">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="43,35,16,15">
      <entry box="1,2,10,2"/>
     </state_glyph>
    </state>
    <state_diagram size="101,61"/>
   </statechart>
  </class>
  <attribute name="AO_Grinder" type="QActive * const" visibility="0x00" properties="0x00"/>
  <attribute name="AO_Scale" type="QActive * const" visibility="0x00" properties="0x00"/>
  <attribute name="DOSE" type="float" visibility="0x00" properties="0x00"/>
 </package>
 <package name="Events" stereotype="0x01">
  <class name="GrinderEvent" superclass="qpcpp::QEvt"/>
 </package>
 <directory name=".">
  <file name="Grinder.ino">
   <text>
#include &quot;includes.h&quot;

Q_DEFINE_THIS_FILE

 // this blathering on is in case you want to make the class a static variable in a function
extern &quot;C&quot; {
  __extension__ typedef int __guard __attribute__((mode (__DI__)));
  int __cxa_guard_acquire(__guard *g) { return !*(char *)(g); };
  void __cxa_guard_release (__guard *g) { *(char *)g = 1; };
  void __cxa_guard_abort (__guard *) { };
} // end extern &quot;C&quot;

using namespace QP;

// ===== definitions =====

//............................................................................
void QF::onStartup(void) {
    // configure 8bit Timer0
    TCCR0A = (1 &lt;&lt; WGM01) | (0 &lt;&lt; WGM00); // timer/counter control, CTC mode, no PWM
    TCCR0B = (1 &lt;&lt; CS02 ) | (0 &lt;&lt; CS01) | (1 &lt;&lt; CS00); // timer/counter control, 1/1024 prescaler, internal clock source
    //ASSR  &amp;= ~(1 &lt;&lt; AS2);
    TIMSK0 = (1 &lt;&lt; OCIE0A);         // timer interrupt mask, enable TIMER2 compare Interrupt
    TCNT0  = 0;                     // timer/counter 0, initialize couter to 0
    OCR0A  = (F_CPU / BSP_TICKS_PER_SEC / 1024) - 1; // output compare register, init with value to compare to
}
//............................................................................
void QF::onCleanup(void) {
}
//............................................................................
void QF::onIdle() {
    QF_INT_ENABLE(); // re-enable interrupts
}
//............................................................................
void Q_onAssert(char const Q_ROM * const file, int line) {
    QF_INT_DISABLE(); // disable all interrupts
    Serial1.println(&quot;Assert hit!&quot;);
    BSP_ledOff(); // User LED permanently ON
    asm volatile (&quot;jmp 0x0000&quot;); // perform a software reset of the Arduino
}


//............................................................................
void setup() {
    BSP_init(); // initialize the BSP

    QF::init(); // initialize the framework and the underlying RT kernel

    static QEvt const *grinder_queueSto[10]; // alocate event queue buffer
    static QEvt const *scale_queueSto[10]; // alocate event queue buffer

    static QF_MPOOL_EL(GrinderEvent) l_smlPoolSto[20]; //storage for small epool

    QF::poolInit(l_smlPoolSto, sizeof(l_smlPoolSto), sizeof(l_smlPoolSto[0])); // initialize event pools...

    DOSE = 7.0;

    AO_Grinder-&gt;start(1, grinder_queueSto, Q_DIM(grinder_queueSto), (void *)0, 0U); // start the grinder active object
    AO_Scale-&gt;start(2, scale_queueSto, Q_DIM(scale_queueSto), (void *)0, 0U);        // start the scale active object

}
</text>
  </file>
  <file name="Grinder.h">
   <text>#ifndef Grinder_h
#define Grinder_h

#include &quot;includes.h&quot;

$declare(AOs::AO_Grinder)

$declare(AOs::Grinder)

#endif // Grinder_h</text>
  </file>
  <file name="Grinder.cpp">
   <text>
#include &quot;board.h&quot;
#include &quot;includes.h&quot;
#include &quot;signals.h&quot;

//#include &quot;bsp.h&quot;  /* Board Support Package */
//#include &quot;dpp.h&quot;  /* Application interface */

Q_DEFINE_THIS_MODULE(&quot;Grinder&quot;)

static Grinder l_grinder;                    // instantiate the Grinder AO
QActive * const AO_Grinder = &amp;l_grinder;     // initialize the global pointer to grinder

$define(AOs::Grinder)</text>
  </file>
  <file name="Scale.cpp">
   <text>
#include &quot;board.h&quot;
#include &quot;includes.h&quot;
#include &quot;signals.h&quot;

//#include &quot;bsp.h&quot;  /* Board Support Package */
//#include &quot;dpp.h&quot;  /* Application interface */

Q_DEFINE_THIS_MODULE(&quot;Scale&quot;)

static Scale l_scale;                    // instantiate the Scale AO
QActive * const AO_Scale = &amp;l_scale;     // initialize the global pointer to scale

$define(AOs::Scale)</text>
  </file>
  <file name="Scale.h">
   <text>#ifndef Scale_h
#define Scale_h

#include &quot;includes.h&quot;

$declare(AOs::AO_Scale)

$declare(AOs::Scale)

#endif // Scale_h</text>
  </file>
  <file name="Events.h">
   <text>#ifndef Events_h
#define Events_h

$declare(Events::GrinderEvent)

$declare(AOs::DOSE)

#endif // Events_h</text>
  </file>
  <file name="Globals.cpp">
   <text>
$define(AOs::DOSE)
</text>
  </file>
 </directory>
</model>
